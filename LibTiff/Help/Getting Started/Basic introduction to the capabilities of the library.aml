<?xml version="1.0" encoding="utf-8"?>
<topic id="7404175a-f67f-479b-83f7-0e6dc75b9acf" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
            <para>This article describes some basic stuff about LibTiff.Net</para>
        </introduction>
        <section address="Section1">
            <content></content>
            <sections>
                <section address="SubSection1">
                    <title>Error Handling</title>
                    <content>
                        <para>
                            LibTiff.Net handles most errors by returning an invalid/erroneous
                            value when returning from a function call. Various diagnostic messages
                            may also be generated by the library. All error and warning messages
                            are directed to a single global error handler object that can be
                            specified with a call to
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)</codeEntityReference>.
                        </para>
                    </content>
                </section>
                <section address="SubSection2">
                    <title>Basic File Handling</title>
                    <content>
                        <para>
                            The library (like libtiff) is modeled after the normal stdio library.
                            For example, to read from an existing TIFF image the file must first 
                            be opened:
                        </para>
                        <code language="cs">
                            Tiff image = Tiff.Open("foo.tif", "r")
                            // ... do stuff ...
                            image.Close(); // or image.Dispose();
                        </code>
                        <para>
                            To create or overwrite a TIFF image the file is also opened, but
                            with a "w" argument:
                        </para>
                        <code language="cs">
                            Tiff image = Tiff.Open("foo.tif", "w")
                            // ... do stuff ...
                            image.Close(); // or image.Dispose();
                        </code>
                        <para>
                            If the file already exists it is first truncated to zero length.
                        </para>
                        <alert class="note">
                            <para>
                                TIFF image files may not be opened for both reading and writing
                                by LibTiff.Net; there is no support for altering the contents of
                                a TIFF file.
                            </para>
                        </alert>
                        <para>
                            LibTiff.Net buffers much information associated with writing a valid
                            TIFF image. You should dispose all
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.Tiff</codeEntityReference>
                            objects. When writing a TIFF image it is especcialy important.
                            You can also call
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Close</codeEntityReference>
                            at any time to close image (note that image is automatically closed
                            during disposal). You can flush buffered data at any time using 
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Flush</codeEntityReference>.
                        </para>
                    </content>
                </section>
                <section address="SubSection3">
                    <title>TIFF Directories</title>
                    <content>
                        <para>
                            TIFF supports the storage of multiple images in a single file. Each
                            image has an associated data structure termed a
                            <legacyItalic>directory</legacyItalic> that houses all the information
                            about the format and content of the image data. Images in a file are
                            usually related but they do not need to be; it is perfectly alright to
                            store a color image together with a black and white image. Note
                            however that while images may be related their directories are not.
                            That is, each directory stands on its own; their is no need to read an
                            unrelated directory in order to properly interpret the contents of
                            an image.
                        </para>
                        <para>
                            LibTiff.Net provides several routines for reading and writing
                            directories. In normal use there is no need to explicitly read or
                            write a directory: the library automatically reads the first directory
                            in a file when opened for reading, and directory information to be
                            written is automatically accumulated and written when writing
                            (assuming
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Dispose</codeEntityReference>,
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Close</codeEntityReference> or
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Flush</codeEntityReference>
                            are called).
                        </para>
                        <para>
                            For a file open for reading the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetDirectory(System.Int16)</codeEntityReference>
                            method can be used to select an arbitrary directory; directories are
                            referenced by number with the numbering starting at 0. Otherwise the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.ReadDirectory</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory</codeEntityReference>
                            methods can be used for sequential access to directories. For example,
                            to count the number of directories in a file the following code
                            might be used:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace CountTiffDirectories
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            int dircount = 0;
                                            do
                                            {
                                                dircount++;
                                            } while (image.ReadDirectory());

                                            System.Console.Out.WriteLine("{0} directories in {1}", dircount, args[0]);
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            Finally, note that there are couple of methods for querying the
                            directory status of an open file:
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.CurrentDirectory</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.LastDirectory</codeEntityReference>.
                        </para>
                        <para>
                            There is also
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.PrintDirectory</codeEntityReference>
                            that can be called to print a formatted description of the
                            contents of the current directory.
                        </para>
                    </content>
                </section>
                <section address="SubSection4">
                    <title>TIFF Tags</title>
                    <content>
                        <para>
                            Image-related information such as the image width and height, number
                            of samples, orientation, colorimetric information, etc. are stored in
                            each image directory in <legacyItalic>fields</legacyItalic> or
                            <legacyItalic>tags</legacyItalic>. Tags are identified by a number
                            that is usually a value registered with the Aldus (now Adobe)
                            Corporation. LibTiff.Net uses
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.TiffTag</codeEntityReference>
                            enumeration instead of numbers to make code much more readable and
                            understandable. Beware however that some vendors write TIFF
                            images with tags that are unregistered; in this case interpreting
                            their contents is usually a waste of time.
                        </para>
                        <para>
                            LibTiff.Net reads the contents of a directory all at once and converts
                            the on-disk information to an appropriate in-memory form. While the
                            TIFF specification permits an arbitrary set of tags to be defined and
                            used in a file, the library only understands a limited set of tags.
                            Any unknown tags that are encountered in a file are ignored. There is
                            a mechanism to extend the set of tags the library handles without
                            modifying the library itself; this is described in
                            <link xlink:href="e0ed9e8f-4b0e-4480-9693-fbf731ed3b2f"/>
                            article.
                        </para>
                        <para>
                            LibTiff.Net provides two methods for getting and setting tag values:
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])</codeEntityReference>.
                            The GetField method returns array of
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.FieldValue</codeEntityReference>
                            objects. The array has length equal to number of tag values. If the
                            array is null then tag is not defined in the directory. The SetField
                            method accepts variable number of tag values as arguments. The TIFF
                            specification defines <legacyItalic>default values</legacyItalic> for
                            some tags. To get the value of a tag, or its default value if it is
                            undefined, the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.GetFieldDefaulted(BitMiracle.LibTiff.Classic.TiffTag)</codeEntityReference>
                            method may be used.
                        </para>
                        <para>
                            The documentation for
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])</codeEntityReference>
                            methods specifiy the exact data types and calling conventions required
                            for each tag supported by the library.
                        </para>
                    </content>
                </section>
                <section address="SubSection5">
                    <title>TIFF Compression Schemes</title>
                    <content>
                        <para>
                            LibTiff.Net includes support for a wide variety of data compression
                            schemes. In normal operation a compression scheme is automatically used
                            when the
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.TiffTag</codeEntityReference>.COMPRESSION
                            tag is set, either by opening a file for reading, or by setting the
                            tag when writing.
                        </para>
                        <para>
                            Compression schemes are implemented by software modules termed
                            <legacyItalic>codecs</legacyItalic> that implement decoder and encoder
                            methods that hook into the core library i/o support. Codecs other than
                            those bundled with the library can be registered for use with the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.RegisterCodec(BitMiracle.LibTiff.Classic.TiffCodec)</codeEntityReference>
                            method. This method can also be used to override the core-library
                            implementation for a compression scheme.
                        </para>
                    </content>
                </section>
                <section address="SubSection6">
                    <title>Byte Order</title>
                    <content>
                        <para>
                            The TIFF specification says, and has always said, that a
                            <legacyItalic>correct TIFF reader must handle images in big-endian and
                            little-endian byte order</legacyItalic>. LibTiff.Net conforms in this
                            respect. Consequently there is no means to force a specific byte order
                            for the data written to a TIFF image file (data is written in the
                            native order of the host CPU unless appending to an existing file, in
                            which case it is written in the byte order specified in the file).
                        </para>
                    </content>
                </section>
                <section address="SubSection7">
                    <title>Data Placement</title>
                    <content>
                        <para>
                            The TIFF specification requires that all information except an 8-byte
                            header can be placed anywhere in a file. In particular, it is
                            perfectly legitimate for directory information to be written after the
                            image data itself. Software that require that data be organized in a
                            file in a particular order (e.g. directory information before image
                            data) does not correctly support TIFF. LibTiff.Net provides no
                            mechanism for controlling the placement of data in a file; image data
                            is typically written before directory information.
                        </para>
                    </content>
                </section>
                <section address="SubSection8">
                    <title>RGBA Image Support</title>
                    <content>
                        <para>
                            LibTiff.Net provides a high-level interface for reading image data
                            from a TIFF file. This interface handles the details of data
                            organization and format for a wide variety of TIFF files; at least the
                            large majority of those files that one would normally encounter. Image
                            data is, by default, returned as ABGR pixels packed into 32-bit words
                            (8 bits per sample). Rectangular rasters can be read or data can be
                            intercepted at an intermediate level and packed into memory in a
                            format more suitable to the application. The library handles all the
                            details of the format of data stored on disk and, in most cases, if
                            any colorspace conversions are required: bilevel to RGB, greyscale to
                            RGB, CMYK to RGB, YCbCr to RGB, 16-bit samples to 8-bit samples,
                            associated/unassociated alpha, etc.
                        </para>
                    </content>
                </section>
                
                <section address="SubSection2">
                    <title>Sub-section 2</title>
                    <content>
                        <para>Sub-section content.</para>
                    </content>
                </section>
            </sections>
        </section>
        <relatedTopics>
            <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
        </relatedTopics>
    </developerConceptualDocument>
</topic>